{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.17.1\n"
     ]
    }
   ],
   "source": [
    "%matplotlib inline\n",
    "\n",
    "from sklearn import datasets\n",
    "from sklearn import linear_model\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.metrics import classification_report\n",
    "from sklearn.preprocessing import scale\n",
    "\n",
    "import sklearn\n",
    "print sklearn.__version__"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# boston data\n",
    "boston = datasets.load_boston()\n",
    "y = boston.target\n",
    "X = boston.data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'__class__ __cmp__ __contains__ __delattr__ __delitem__ __dict__ __doc__ __eq__ __format__ __ge__ __getattr__ __getattribute__ __getitem__ __gt__ __hash__ __init__ __iter__ __le__ __len__ __lt__ __module__ __ne__ __new__ __reduce__ __reduce_ex__ __repr__ __setattr__ __setitem__ __setstate__ __sizeof__ __str__ __subclasshook__ __weakref__ clear copy fromkeys get has_key items iteritems iterkeys itervalues keys pop popitem setdefault update values viewitems viewkeys viewvalues'"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "' '.join(dir(boston))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['CRIM', 'ZN', 'INDUS', 'CHAS', 'NOX', 'RM', 'AGE', 'DIS', 'RAD',\n",
       "       'TAX', 'PTRATIO', 'B', 'LSTAT'], \n",
       "      dtype='|S7')"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "boston['feature_names']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:          boston.target   R-squared:                       0.741\n",
      "Model:                            OLS   Adj. R-squared:                  0.734\n",
      "Method:                 Least Squares   F-statistic:                     108.1\n",
      "Date:                Sun, 15 May 2016   Prob (F-statistic):          6.95e-135\n",
      "Time:                        14:29:46   Log-Likelihood:                -1498.8\n",
      "No. Observations:                 506   AIC:                             3026.\n",
      "Df Residuals:                     492   BIC:                             3085.\n",
      "Df Model:                          13                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "===================================================================================\n",
      "                      coef    std err          t      P>|t|      [95.0% Conf. Int.]\n",
      "-----------------------------------------------------------------------------------\n",
      "Intercept          36.4911      5.104      7.149      0.000        26.462    46.520\n",
      "boston.data[0]     -0.1072      0.033     -3.276      0.001        -0.171    -0.043\n",
      "boston.data[1]      0.0464      0.014      3.380      0.001         0.019     0.073\n",
      "boston.data[2]      0.0209      0.061      0.339      0.735        -0.100     0.142\n",
      "boston.data[3]      2.6886      0.862      3.120      0.002         0.996     4.381\n",
      "boston.data[4]    -17.7958      3.821     -4.658      0.000       -25.302   -10.289\n",
      "boston.data[5]      3.8048      0.418      9.102      0.000         2.983     4.626\n",
      "boston.data[6]      0.0008      0.013      0.057      0.955        -0.025     0.027\n",
      "boston.data[7]     -1.4758      0.199     -7.398      0.000        -1.868    -1.084\n",
      "boston.data[8]      0.3057      0.066      4.608      0.000         0.175     0.436\n",
      "boston.data[9]     -0.0123      0.004     -3.278      0.001        -0.020    -0.005\n",
      "boston.data[10]    -0.9535      0.131     -7.287      0.000        -1.211    -0.696\n",
      "boston.data[11]     0.0094      0.003      3.500      0.001         0.004     0.015\n",
      "boston.data[12]    -0.5255      0.051    -10.366      0.000        -0.625    -0.426\n",
      "==============================================================================\n",
      "Omnibus:                      178.029   Durbin-Watson:                   1.078\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):              782.015\n",
      "Skew:                           1.521   Prob(JB):                    1.54e-170\n",
      "Kurtosis:                       8.276   Cond. No.                     1.51e+04\n",
      "==============================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
      "[2] The condition number is large, 1.51e+04. This might indicate that there are\n",
      "strong multicollinearity or other numerical problems.\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import statsmodels.api as sm\n",
    "import statsmodels.formula.api as smf\n",
    "\n",
    "# Fit regression model (using the natural log of one of the regressors)\n",
    "results = smf.ols('boston.target ~ boston.data', data=boston).fit()\n",
    "\n",
    "print results.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "regr = linear_model.LinearRegression()\n",
    "lm = regr.fit(boston.data, y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(36.491103280361237,\n",
       " array([ -1.07170557e-01,   4.63952195e-02,   2.08602395e-02,\n",
       "          2.68856140e+00,  -1.77957587e+01,   3.80475246e+00,\n",
       "          7.51061703e-04,  -1.47575880e+00,   3.05655038e-01,\n",
       "         -1.23293463e-02,  -9.53463555e-01,   9.39251272e-03,\n",
       "         -5.25466633e-01]),\n",
       " 0.74060774286494269)"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lm.intercept_, lm.coef_, lm.score(boston.data, y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "predicted = regr.predict(boston.data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x11616ef10>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "ax.scatter(y, predicted)\n",
    "ax.plot([y.min(), y.max()], [y.min(), y.max()], 'k--', lw=4)\n",
    "ax.set_xlabel('$Measured$', fontsize = 20)\n",
    "ax.set_ylabel('$Predicted$', fontsize = 20)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "训练集和数据集"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[  6.32000000e-03,   1.80000000e+01,   2.31000000e+00, ...,\n",
       "          1.53000000e+01,   3.96900000e+02,   4.98000000e+00],\n",
       "       [  2.73100000e-02,   0.00000000e+00,   7.07000000e+00, ...,\n",
       "          1.78000000e+01,   3.96900000e+02,   9.14000000e+00],\n",
       "       [  2.72900000e-02,   0.00000000e+00,   7.07000000e+00, ...,\n",
       "          1.78000000e+01,   3.92830000e+02,   4.03000000e+00],\n",
       "       ..., \n",
       "       [  6.07600000e-02,   0.00000000e+00,   1.19300000e+01, ...,\n",
       "          2.10000000e+01,   3.96900000e+02,   5.64000000e+00],\n",
       "       [  1.09590000e-01,   0.00000000e+00,   1.19300000e+01, ...,\n",
       "          2.10000000e+01,   3.93450000e+02,   6.48000000e+00],\n",
       "       [  4.74100000e-02,   0.00000000e+00,   1.19300000e+01, ...,\n",
       "          2.10000000e+01,   3.96900000e+02,   7.88000000e+00]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "boston.data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "from sklearn.cross_validation import train_test_split #train_test_split按照一定比例切分数据集\n",
    "Xs_train, Xs_test, y_train, y_test = train_test_split(boston.data, boston.target, test_size=0.2, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "regr = linear_model.LinearRegression()\n",
    "lm = regr.fit(Xs_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(30.288948339368815,\n",
       " array([ -1.12463481e-01,   3.00810168e-02,   4.07309919e-02,\n",
       "          2.78676719e+00,  -1.72406347e+01,   4.43248784e+00,\n",
       "         -6.23998173e-03,  -1.44848504e+00,   2.62113793e-01,\n",
       "         -1.06390978e-02,  -9.16398679e-01,   1.24516469e-02,\n",
       "         -5.09349120e-01]),\n",
       " 0.75088377867329137)"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lm.intercept_, lm.coef_, lm.score(Xs_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "predicted = regr.predict(Xs_test) #预测训练集数据"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAZQAAAEYCAYAAAB7twADAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAIABJREFUeJzt3Xl8VOXZ8PHfFbINSwJI1KpIUASsooAFcakEAbXP8yrU\n1w33GhfUCi74AJYqSqki9FW0RdBGpSiLtn0svm8rSCXVxwqJFNGyU0okKCRuqAQhgev945xJJpPJ\nMjNnMkuu7+dzPmbOnDnnvgHnyr1dt6gqxhhjTLTS4l0AY4wxqcECijHGGE9YQDHGGOMJCyjGGGM8\nYQHFGGOMJyygGGOM8URSBBQRyRWRV0Vko4isF5EzRaSLiCwXkc0iskxEcuNdTmOMacuSIqAAs4E/\nq+rJwOnAJmASsEJV+wBvAZPjWD5jjGnzJNEXNopIDrBWVU8MOr8JGKqqe0TkaKBYVfvGpZDGGGOS\nooXSE/hMRF4QkX+IyLMi0h44SlX3AKjqbuDIuJbSGGPauGQIKOnAQOA3qjoQ2IfT3RXctErsppYx\nxqS49HgXoAXKgZ2q+r77+g84AWWPiBwV0OVVEerDImKBxhhjIqCqEs71Cd9Ccbu1dopIb/fUcGA9\nsBS40T13A/CnJu6RssdDDz0U9zJY/ax+bbF+qVw31ch+D0+GFgrAOOBlEckAtgM/AdoBr4jITUAZ\ncEUcy2eMMW1eUgQUVV0HDArx1ojWLosxxpjQEr7LyzStoKAg3kWIKatfckvl+qVy3SKV8OtQoiUi\nmup1NMYYr4kImmqD8sYYY5KDBRRjjDGesIBijDHGExZQjDHGeMICijHGGE9YQDHGGOMJCyjGGGM8\nYQHFGGOMJyygGGOM8YQFFGOMMZ6wgGKMMcYTFlCMMcZ4wgKKMcYYT1hAMcYY4wkLKMYYYzxhAcUY\nY4wnLKAYY4zxhAUUY4wxnrCAYowxxhMWUIwxxnjCAooxxhhPpMe7AC0hIjuAvcBhoFpVB4tIF2AJ\n0APYAVyhqnvjVkhjjGnjkqWFchgoUNUBqjrYPTcJWKGqfYC3gMlxK50xxpikCShCw7KOAua7P88H\nRrdqiYwxbZKq8sUXX8S7GAkpWQKKAm+KSKmI3OyeO0pV9wCo6m7gyLiVzhjTZkybNo3Ro0ejqvEu\nSsJJijEU4BxV/VRE8oDlIrIZJ8gEavRvd+rUqbU/FxQUUFBQEIsyGmPagMLCQmbMmMHvf/97Lr/8\n8ngXxzPFxcUUFxdHdQ9JtigrIg8B3wI344yr7BGRo4GVqnpyiOs12epojEls06ZNo6ioiE2bNpGd\nnR3v4sSEiKCqEs5nEr7LS0Tai0hH9+cOwAXAR8BS4Eb3shuAP8WlgMaYlKOqLFq0iHXr1oV8f8KE\nCYwcOZKvv/66lUuW2BK+hSIiPYH/xunSSgdeVtXHRKQr8ArQHSjDmTb8VYjPWwvFGNNiq1ev5p57\n7uG9995j6NChrFy5EpGwflFPCZG0UBI+oETLAooxpiXKy8uZPHkyL730Ur3zf/jDH7j00kvjVKr4\nsYASggUUY0xzDh48SM+ePfnkk08avNe3b1/Wr19PWlrCjxB4KiXHUIwxJtYyMzO59957G5wfNWoU\nr7/+epsLJpGyFooxxuC0Uk455RS2bdtGv379eOKJJxg+fHi8ixU31uUVggUUY4zfrl27eO6553jw\nwQdDtjreeOMNysrKuPnmm2nXrl0cSpg4LKCEYAHFGFNVVcWsWbOYMWMGVVVVLFiwgGuvvTbexUpo\nFlBCsIBiTNvlX08yceJEysvLa88fe+yxbN68mQ4dOsSxdInNBuWNMSbAq6++yjXXXFMvmIDT9VVU\nVBSnUqUua6EYY1JWTU0N/fv3Z/369bXnunXrxi9+8QsbJ2mGtVCMMSZAeno6TzzxBAAZGRlMmDCB\nbdu2cdttt1kwiQFroRhjkpp/nCQ9PZ0rrrgi5DWPPvool112GSeddFIrly552aB8CBZQjEldq1ev\n5u6772bVqlUceeSRbN26lZycnHgXKyVYl5cxpk0oLy/nuuuuY8iQIaxatQqAiooKpk+fHueStW3W\nQjHGJJ2hQ4fy9ttvNzjfsWNHysvLyc3NjUOpUou1UIwxbUKolsioUaNYu3atBZM4soBijEk65557\nbu0AfL9+/VixYgWvvfYavXr1inPJ2jYLKMaYhFReXs6tt97K559/HvL9GTNmMHfuXNauXdumkzgm\nEhtDMcYklKqqKmbOnMnjjz9OVVUVd911F0899VS8i1VPZWUlO3bsID8/n7y8vHgXJyZsDMUYk7RU\nlYULF9KnTx+mTp1KVVUVAHPmzGHDhg1xLl2dRYuW0KNHX0aOHEuPHn1ZtGhJvIuUMKyFYoxJCB99\n9BGnnXZayPfuvPNOfv3rX7dyiRqqrKykR4++7N+/EjgN+BCfbxhlZZtSrqViLRRjTNLq168f119/\nfb1zeXl5zJs3j9mzZ8epVPXt2LGDzMx8nGACcBoZGT3YsWNH/AqVQCygGGMSxqOPPkr79u1r825t\n3bqVW2+9tdXzblVWVlJaWkplZWW98/n5+Rw8uAP40D3zIdXVZeTn57dq+RKVBRRjTKvxj5NMmTIl\n5PvHHHMM8+fPZ8OGDcycOTMua0qaGiPJy8ujqGgOPt8wcnIG4vMNo6hoTsp1d0XKxlCMMa2ipKSE\n8ePHs2rVKkSENWvWMGDAgHgXq56WjpHYLK/QkqaFIiJpIvIPEVnqvu4iIstFZLOILBMRWx5rTALa\ntWsX119/PWeeeWZt3i1V5Z577iHRftmzMZLoJE1AAcYDgXMHJwErVLUP8BYwOS6lMsY06dFHH2XB\nggUNzv/973+vt/FVImjJGIlNG26Cqib8ARwHvAkUAEvdc5uAo9yfjwY2NfJZNcbET0VFhebk5ChQ\ne4waNUq3bNkS76KFtHDhYvX5umpOzgD1+brqwoWLa9+rqKhQn6+rwjoFVVinPl9XraioiGOJY8P9\n7gzruzpZWihPAPfj/GP0O0pV9wCo6m7gyHgUzBjTtLy8PB588EEATj311Nq8W+FsdtXYrKtYGDPm\nSsrKNrFixTzKyjYxZsyVte9Zl1jT0uNdgOaIyH8Ce1T1AxEpaOLSRjtjp06dWvtzQUEBBQVN3cYY\nE65du3YxefJkbr/9ds4666wG7991111069aNa665hvT08L52Fi1aQmHhHWRmOt1RRUVz6n3Jx0Je\nXl7Iwfb6XWLOoH2qTBsuLi6muLg4upuE26Rp7QP4JfAxsB34FPgWWABspH6X18ZGPu9F688YE8K+\nffv04Ycf1vbt2yugZ555ph46dMiz+ydiF1NTXWKphAi6vJJq2rCIDAXuU9VLRORx4HNVnSEiE4Eu\nqjopxGc0mepoTDJQVRYvXszEiRPZuXNnvfcWLFjAtdde68lzSktLGTlyLHv3rqk9l5MzkBUr5jFo\n0CBPnhEJmzbcyGeS6cs2KKB0BV4BugNlwBWq+lWIz1hAMcZje/fu5cQTTwyZWv6iiy7iL3/5iyfP\naUu5sxJNSq9DAVDVv6nqJe7PX6jqCFXto6oXhAomxpjYyM3NZdq0afXOdevWjblz5/L666979hxb\nmZ5ckqqFEglroRgTGzU1NfTv358tW7Ywbtw4pkyZQufOnWPyrLbQxZRoUr7LKxIWUIyJjH+cZOHC\nhbz22mshEzS+//775ObmhjUF2CQHCyghWEAxJnwlJSXcfffdvPfeewA899xz3HzzzXEulWlNngcU\nEbkQWKWqe6MtXLxYQDGm5fzrSYJTpRx55JFs3bqVnJycOJXMtLZYDMq/AnwmImtE5FcicnGoJIwi\n0lNEnhaRn4vIEeEUwBiTON58882Qebe+/PJL3nnnnTiUyCST5looW3DSngzCyaOVDxwC1gHF7vG2\nqn7tXp8H/FJVb4lhmcNiLRSTSmI9OH348GEGDx7MmjV16z5GjRrFrFmz6NWrl+fPM4krFi2Upar6\njKrepKon4ASUcUBv4EpgKfC5iLzvLjQcDfQMv+jGmOa0RpbbtLQ0nnzyScDZktefd8uCiWmJsAfl\nReRpYLqq7haRHsAw4DxgONAeuEtVF3te0ghZC8WkAi8X+JWXl/PAAw8waNAg7rrrrpDXLF++nPPP\nPz/svFsmdbTWwsZ96mT3RVXLVPVFVb0Jp9Xy38DaCO5pjGmCF1luq6qqeOSRR+jTpw8LFizgoYce\nCrnSHeCCCy6wYGLCFklAOVFEugefVNUDwFjgjqhLZYyppyUbPzVG1dnHvU+fPjz00ENUVVUBzkD7\nww8/HKsimzYokoDyDLBGRMaISL2VTqp6GKjxpGTGmFrRpiCZM2cO5eXlDc6/++67VFdXe11c00ZF\ntLBRRApxAss3wDJgFU6K+ROAAn++rURgYygmlUQ6y+v999+vl51XJJ309ExeeOG3XHPNmFgU1SS5\nVl0pLyKnA9OBCwF/S2UtcLmqbo/opjFgAcW0JaqKSOjvgKuuuoolS5YA1wOzgY8tc69pVKtmG1bV\ndar6v4BuOOtUeqvqGYkUTIxpK/zjJKeeeiq7d+8Oec0NN9xAx47fB+YDnbHta43Xwg4oItLBXTHf\nDUBV96rqGuC0UKvojTGxtXr1as4++2yuueYaNmzYwJQpU0Je94Mf/IBDh3YTycC+MS0RSQvlN0Bf\n4AUR6Rhw/u/AUyKSVHusGJOsPvnkE6677jqGDBnCqlWras8///zzrF3bcPa+7S1iYi2ShY2/UtX7\nRGQQcLqq/jbgvR8Ag1T1GY/LGTEbQzHx0Br7d3z00Uf079+fw4cP1zufkZHBb37zG265JXQGJNtb\nxLREa42hHARQ1VLg5MA3VPV9oE8E9zQmZcyb9xzdu/dm+PDbYpYiBZzUKLfeemu9c6NGjWLDhg2N\nBhNwWiqDBg2yYGI8F0lA6SoiR7s/Hw7x/oEoymNMUps37znGjh3PgQN/45tv/sH+/Su56aaxLF++\nnMrKyojve+jQoZDnH3nkEXJzcy3vlkkIkXR59QdewFkRP1pVJwa9v1BVr/auiNGxLi/TWiorK+ne\nvRcHDvQEPnDPLgFuokOHkzh8eCdFRXMYM+bKFt9v9erVzJ8/n8zMTF5++eWQ13300Ud8//vfD7mj\nojGRarV1KCJyI/As8AXwR2A7kA5cBJSq6v1h3zRGLKCY1lJaWsrw4YV8880uYCXwPZwe4GLCTej4\n4ou/45ZbxlJTcwB/R8C7777L2WefHXa5bMzERKLV1qGo6ovAUJx9UW4BHgcmAavd/xrT5uTn51NT\nswuYiJOE+2ygK+EmdHzuuee46aafUFOzn8Be5bvuuqvBAHxzWiPlvTF+0SxsfE9VLwR8OL+KHaGq\nE1U1dGevMSmublruDDp2PIbMzN1kZFTS0nUflZWVlJaW8sYbb+Ckxavv66+/pqKiosXlqayspLDw\nDvbvX8nevWvYv38lhYV3RDWWY0xTIlnYeHvga1Wtwenu6uZVoYKelyUiq0VkrYh8JCIPuee7iMhy\nEdksIstsUaVJBGPGXElZ2Sbeeut5ysu3M3/+sy1a9xHYkvjzn98KercLGRnteeeddzj66KMbfLYx\njaW8X7t2LaWlpRZYjOeaHUNxU9XvUdWD7us/q+p/BF2TC4wHqlR1lueFFGmvqlVuduN3cXaN/N/A\n56r6uIhMBLqoaoPuNhtDMcFae0yhsrKydqHhgAEDap958OBBMjMzQ26e1a7dmRw69B2ZmUeSlnaQ\n55+f2+LB/MDnBt83I+Nc0tMzyMx00uGHM0nAtC2RjKGgqk0ewC6gCmeU8WHgbSCzkWt/ANzX3D0j\nPXB2hHwfJ3fYJuAo9/zRwKZGPqPG+C1cuFh9vq6amztQfb6uunDh4lZ/5ssvL9KXX35Zu3fvrm+9\n9ZaWlJRobu5ABa09OnXqry+88IKWlJRoRUVF1M/OyRmg2dmdNTMzV2Gd+5x16vN1jer+JnW5353h\nfUc3e4GTkv5u4PfAbpxRwv1uYJkGjADaB1z/eLiFaEEZ0nAyGX8NPOqe+zLomi8a+ay3f8omaVVU\nVKjP17VVv1AbPnOBirRTQAE9/fTT9dNPP41puSoqKrSkpESXLVvWIHDl5AzQkpIST55jUkskAaXZ\nPT7VyR78pHsgIquA53GmsdwM/AyoFpEPgB3AMS1sHLWYOiOUA0QkB/hvETnF/R+y3mWNfX7q1Km1\nPxcUFFBQUOB1EU0SWLt2LWlp3Qk16yovLy8mXWH+cYz9+48BrgNeIrAHdt26dbz++usUFc2hsHAY\nGRk9qK4u8zTHVl5eXm396nZ9dLrALDmk8SsuLqa4uDi6m4QbgYC/BL3+PvBTYDHwKnBauPcM8/k/\nB+4DNlK/y2tjI9d7FK9NMlu4cLFmZ3dWaB+yJRCrrrC6Fsp7Ct+rbZn4j4yMDJ0+fXrttdF2cTUn\nsAustbr8THIighZKJCvlr1DVV6ILY2E9rxtQrap7RcSHs0PkYzjrYL5Q1Rk2KG+aUn9weiNwO9AV\nn+9LiormMGLE+Q0Gr73ceGrRoiUUFt6Bake+++7j2vOjRo1i1qxZrZ4qxRY6mpaIyaB88AFkARcD\nxwSd/xHgC/d+LXheP+AfOLksPgR+5p7vCqwANgPLgc6NfN6LYG2SWMNB7wrt0KG3Llu2rJH3oxtb\n+Pbbbxucq6io0FWrVunpp5+u/fr10xUrVkRVJ2NijVZqoTwM3ANsVtVBAefzgZ+ramFYN4wxa6GY\nUNNnA1sgzb3fUuXl5UyePJk1a9awbt06MjIyGlzzySefcNRRR1neLZPwWiv1Shbwv4BHAk+q6g6c\nTbdujOCexsRM4MZSHTv2IyvrhzzxxGO1wSLajaeqqqp4+OGH6d27Ny+99BIbN25kzpw5Ia895phj\nLJiYlBVJC+VJVb27ifefUNV7oi6ZR6yF0vY0NkYwb95zjB//X2Rm9qSmpqzBor7GFiA2ZenSpdx5\n552Ul5fXO9+5c2e2bdvGEUcc4VGtjGldrdVCyRWRU5t4/2AE9zTGE40lQ6ysrOSeeybV26ckOK/V\nihVvMXr0GK64YnKLEynu37+/QTAB6N69O7t37/auYsYkg3AHXXAGyXcB1+C2cILefy7ce8bywAbl\n24ymFi42N/Ae6aLHw4cP6znnnFM7Dbhbt246d+5crampaY0qGxMzRDAoH3YLRVU/whmULwL+LSJP\nicgNInKpiDxJFBmMjYlGY8kQ/d1fdYv6IHhRX1OfBWecpLy8vEFSRRHhySefJCsri/vuu4+tW7dy\n2223NTtO4s8sbAkaTUoJNwJp3W/+A4A3gUM46VgOA38BciK9ZywOrIXimdZYeBeN5loZwYv6pk2b\nXvvehg0bNCsrR2Flvc/u2bNHFy5cqEcccYSmp/saXfgYzp9JPPKJGRMuYpHLq9kbOGnrBwP50d4r\nFocFFG8ky5dgqJXggYGwoqJCp02brtnZnWvr8tOfjlefr6v6fP0UfJqdna8+X1d95JFf6FlnnRWw\nsr29wqdR5dqKRz4xYyIRl4CS6IcFlOgl25dgYAAJDoQzZ/5Ks7I6B9RlpYLPfV2h8LJmZHTSSy65\npEGaFOcojGrho9eLKI2JlUgCSpPjHSJyr4gMb67bTETyRWRGM7O/TJJqbnwhXhobh8jLy2PQoEF8\n9tln/OQnY+vtWHj//VM4cCAXOABUAh2A7jgpWfoCv6K6uob169eHeGI6ToKGdREnVWxuLMeYpNZU\ntAG2AmuCzl2JkwZlITAi4Hw6TpLI68KNarE8sBZK1BKxhdJcF9zChYvdMZHe9VoDcLJClsLpCl0V\nfq6QrdClXv2ysnI0LS2ttmVyxhk/0KysXE+SKlqCxuSX6OOJXsDrLi+cX8eCc3a9jrM7o39Afjvw\nAPA99/1Z4RYilocFFG8k0pdgXYBbqVCisLJegKv/fv1A6HRvrQx4na0XXzxaoVeDbqhLL71UTz31\n1Nq8W15+ibSFL6RUlSzjidHyPKCE/ADMoW6F/QnAL4FPgGpgDbAy3HvG8rCA4p1E+RIsKSlRn+8E\nN1gMVOiq2dn5tWV78cUXtVOnfm5weNYNIqcpdFbo4Z4vV7hOIU0XLFgQsgW2fft2ra6ujmtdTWJJ\nxNZ6rEQSUJrdYCuE3wDPiMgrqvoW8ICI/By4COiNsy+KSUH+jZrixZ9S5eDBg+zf/ymwCn8yx+++\nG8Lf/vYOQ4deRHp6D775ZhvwOM4+cCcAvwU6AucAdwDzcXa2hsWLF4fc4Kpnz55xqKVJZHUbpoXe\npK2tazKXl4hcCKxS1b1B5zOAHwN/V9WGeScSiOXySg3+PUUyM/P57rttqB7LwYMbat/Pzj4V1Z0c\nOPAO/iADQ+jQoQf79pXhBJ8vgVHA3gb3nzr1Ye6443bbJ8Q0yavM1MkgklxezQWUvUB7nP87i93j\n7RABpidwL1ABzFHVz8MqeQxZQEkugYkdwfmNsGPHjpxxxrkB/xMXA/9BYAslK2somZnd+eabD2vv\n1anTAJ5++m6+++4g99wzibS0o9i3b2OIp/YiK6uCnTu3pdyXgvGe/5ebwNZsYJLRVOH5BlvAFpzt\n7Z7HGXw/jDNW8j4wC/hPAlbGA3lYLi8TIf9gZ6dOAzQjI0fT0ztobu5AzczsqFlZp9QbNM/Oztes\nrM61kwTmzn22yb5t//jP2LFjA9aUdFOYq1Bta0FMWBJlPDGW8HqDLRGZpaoTAl4f7waRGTj9Bsfi\nzPRaB7yFM834SlUdEVZUiyFroSSHUF0JMAS4FngF5/eY9wjsZnjxxWcAJ1X8gAEDWLHiLQoL7yA9\nvTvV1WU8//xcRow4v1431ldffcXJJ5/MZ599RU3Nm8C5tfdbs+Z/+Pbbb63Lyxhabwvgp4Gj3Z97\nADfitGDKcFaKXRXuPWN5YC2UpFBSUqKdOg0IWjPSz10zsk5hsbtW5ETNyMjRjIyOtalSfL6e6vN1\n1ZdfXqTPPPOMduvWTc8555zaVkvw9M6qqqoG06D96VdSfSqoMS1FK20B/JiqTgpxPssNNr9S1c1h\n3TSGrIWSHCorK+nevTcHDvyNuhbKUJylUP/yX4XPN4RDhz7j4MHAwfdhwC8QuQvVQwF3zQSmAf9F\nqMFT/3hNwzGa1B1oNaalWmuDrRNFpHvwSVU9AIzFmZNpTFjy8vKYPftxnG6u03GCRCHO1jvF7lWf\ncvjwZ2RlnUhgGhgQ4I6gYAKQDzyG03BumC7Gn6Ll22+/TcjUMsYkm0gCyjPAGhEZIyL1Nn1Q1cNA\njSclM22GPyfXpZeOZu7c2WRl7SArqyMwh/T0nsB/kJ3dE59vGLNnz+LAge0E5sKCfSHumgFcgjPM\nt4OmcmZZfi1jvBHJBltvAZNxVoZViMhCERknIqNF5F7gJK8LaVJX8Ja9OTk5rF27CvgaWEVNzUZg\nFapfsWbN/3Deeedy6NBB4DyczUOHAJ1wWil+w4ANwHXAv+jY8SZ8vmEUFc0J2YWVl5dHUdEcfL5h\n5OQMbPJaY0zjwh5Dqf2gyOnAdOBCwN9SWQtcrqrbvSle9GwMpWmB6z68+gJt6T0bWyT22muLuOKK\nyezdu6b22pycgdxww3nMnfs81dVdcALO/cCP6dBhNLfffgnLli3j4osv4YknnqldI/DIIz8jL+8I\nBg8ezMknn+xJuY1pC1plllfwAeQCZwC9or1XI/c/DmdK8nrgI2Cce74LsBzYDCwDchv5fDQTHVJa\nLJLchXPPadOmh0zKuGzZsqA1Jcs1LS3DXTvS0c3f1cX92UkMuXv37tq8W/41Ao3N8gq8JpXXERgT\nDVJxgy3gaKC/+3NHN4D0xVkL81/u+YnAY4183ps/3RQTiyR3De+5UrOycnTDhg0hr83O7qzBaeOz\ns7vouHHjVSTLnTLcNWAhIgr5Cgfdz7TXzMyOIYNWU/VrK9lijYlGqwQUnB2JLga6BZ2/tLFWgpcH\n8BowAtgEHKV1QWdTI9d79eebUmKxc2D9ey52g0Fvzcrq3OBLu+5a/3UDFNq7gcSn0F1BgoKJ/3jS\nfcaJumTJkrDq17D1k7rZYo2JRiQBJZJZXr9xWwgviEjHgPN/B54SkUju2SIikg/0x0nidJSq7gFQ\n1d3AkbF6biqKxcymunsW48weXwls5sCBv1FYeEe9nRXrrj0Z53eDW4FDqGbj/PVuBr4X4ikn4Uwr\n/pDMzM8YNmxYWPUDbIqwMTESSfr6z1V1pogUA1fh5AVHVXeLyNPAbThTiz3lBq/fA+NV9VsRCR5p\nb3TkferUqbU/FxQUUFBQ4HXxko5/ZlNwyvZoB6MfeOA+pk27mIMHjyHUl3ZeXl7t4Pcjj/yMKVOG\nkpmZz8GD24HjOHAgJ+BzTwJXuD8LV199NX/8459p1248hw+XU1Q0r9HyNla/AQMGBAQaZyKATRE2\nBoqLiykuLo7uJuE2aYBHA37+VYj3nwz3ni14ZjrwBk4w8Z/bSP0ur42NfDb6tl8SCXew2YvB6YqK\nCp02bXrtuER2dmfNyMhpcvwiO9vZijcj43uakdFBx40bH2JM5QOFNE1Ly9Df/vZ5z+qXSLtPGpOo\naKUxlHnU5fKaGeL9GeHeswXP/B3wf4KfA0x0f7ZBeY3P1qQLFy52A0H7egHEybVV/0u7bqB8hhs4\njnfHSTor+DQ9vYO2a9fevdeJmp7eSSdOnBST8Q2b5WVM0yIJKJHk8uoPvIDTST5aVScGvb9QVa8O\n66ZNP+8c4G2cKcP+gdkHgBKcNLTdcRJTXqGqX4X4vIZbx2QUj41/6p75NPArnB2gHTk5A3n11cfo\n0qVL7bqO0tJShg8v5JtvynDSonwYcLejgP9DdvadzJ8/rzaDsK0HMSY+IlmHEvYYiqp+ICKzgb8B\nX4hIJ5y9UtJxtgEuDfeezTzvXeoWTgZLmDT58RaLrUmbW+hX98yRwF0Ej0sEB4T8/HyqqjYDB6kf\nTAD2AKeRmdmTnj17MmjQoLDLY4yJr4hmZKnqizipYNcBt+Bs3j0JWO3+17Qyr2dtzZv3HN2792b4\n8Nvo0aMvixYtaeKZnwJzgAKgV5OpS0aPHtXIEy8A9jZa5uAULaHKY4yJs3D7yIIPnJbJUUC7aO8V\ni4M2OIbuHg2dAAAYOUlEQVQS7WDz3LnPumtBml+rEfjM7OzOOm3a9HrXBa9az8kZoCJptWtKRNK1\nXTtfk2WOxSJMY0zTaKUxlB8A1wOvquo7Xga3WGgrYyh+0XYLOfuS9OLAgZ7AB7XnO3UawF//+iz5\n+fkN7h/qmSUlJaxfv5E777yX9PQefPPNJmAqzt4kf0DkSh59dDo33XQTAGvXrgWge/fuDXZNLC0t\nZeTIsQ1ye61YMS9k15gxJnqttWPjSzj5wP8R7mfjcdCGWihecHZO7OeuXq9rEWRldW4yN5bfzp07\n9dprr1VA09Oz693DuWeFgmqnTv1rV+X7Wzk+3wnq7MDYr3af+JKSEt2wYYO1UIxpZbTStOHHcLbR\nOy7cz8bjsIASnvpTe7sqnKbg05kzf9Xkl/q+ffv04Ycf1vbt2wekSBGFpbVBxLlXSb3P1j1vZVAQ\nm6Hg006d/Fv0jrO1I8a0okgCSiQr5TcAJ6sz+8qkoAceuI/p0x8lPf04qqt3MHv2bAYO7O/O6Poe\nzkS+/NpZZCLCgAEDKC8vD7qT4vSOpuEsFdpKx443cejQJ7WD9qWlpe59O+BMJT4NZ4fFGcAqvvnG\nmTVWVDSMNWv+p0F3mDEmcUQSUF4FXhGRUuAVVd3kcZlMnCxatITCwjvIzMxHJI2JE8dw22231KZL\nqaraCvQBegL/Zv/+avLz8+nWrRsDBw4MEVBOwsnCkwcMYebMXzB06A/rBYS6mWL78O+sCAdwlhfV\nTYHevz+H2bOfZtq0hy2YGJOowm3S4GT73QLsBw7hzBldhJPDq0+494v1gXV5tUhzM6kqKio0MzO3\n3vuZmbm172/ZskUzMpw9Szp37qzZ2d0Vamoz/QaOmQSrS8eSr+DT7Oy+QbPMZrive1l3lzGthFhk\nGxaRO0Rkh4h8ISKvA51UtTeQg7PX6jM4ubSeBDaIyN+9Dnom9vyLFBvLwrtjxw6ys3viLEB03s/O\nPqH2/ZNOOokJEyYwYcIE3n//fUT24eyJBvAhNTUfN7omZsyYKykr28Tbb7/Chg1rePvt3zFp0t3A\nWTjb/E7FyUC8lf37VzbIXGyMSRBNRRucbMKHcTq197k/78NJ1HgJTnDxX5uFE2CuCzeqxfLAWigt\n0lQL5fDhw/rMM8+460fSFbY2O9Pqpz8d57YqTlLw6U9/Oi7s8jg5wh5RZ68UrT2i3bfFGNM8vJ7l\nBbyHkyMLQIAhwGKcgfn/BAaH+8DWPiygtMzChYs1I6NjbWLGjIwcnTv3WV21apUOGTIkYOYWmp6e\n22TXU/2ZWyXq36Y33Gm+jSWetCnDxsReJAGluUH59qr6iv9bGaff4SoRmQF0VNX/F2UDycRZZWUl\na9eu5aabxlJd/S5O9pz7qK7uxl133U11dVWDz9TU7GXJkj9w6aWXhrxnXY6vgtpz4eQV8y+UHDHi\nfD7+eAvz5j3HL3/p7b4txpgYaCraAMsbOd8RKAo3esXjIAVbKF6lXvcPhnfocLrbCng2aC3IX+q1\nTJwjXdPTs3Xbtm1Nli/ShYiNpeC3dPPGtC5i0OX15ybeezbch8XjSLWA4tWeJ6G+9CFXoV+98YqM\njK4BwWSUwpYWjWFEklfMcnYZkzgiCSjNdXk1NQusJsJGkYlQZWUlhYV3sH//SjdN/YcUFg5jxIjz\nw+4Cqp/uvgTIBbrhzAivS0OflnaItLR0Dh+eg5NYumVZjMeMuZL+/U+jpKSEwYMHc/LJJ4dZJvAi\nBb8xpvU0N234XBF5TER+JCI5rVIi06jmpvaGIz8/nwMHtgMXA2cCPyE7+wsmTboPn28YOTkD8fmG\n8cIL83jppZfw+SbVnmvJGMaiRUs444xzGT/+Kc4449yQ6eYrKyspLS2tnQLsdQp+Y0wra6r5gjNN\n+DDOAsYanPSzT+NMJ36pkc/cF24zKZYHKdTl5VWXkD/vVlZWVr3xkfvvn1j7nODxinDGMFpSzsa6\n7pJxv3cb3zGpiBiMoawDTgFux5kuvCsgwBwCdgNL3Pf7up9ZGW4hYnmkUkBRjf4Lt6amRr///e+H\nGGxH+/Tpo9XV1VGXsaSkRHNzBza6dqQlq/KT5QvaqzEtYxJNLALKwhDnegE3AfOBfwe1YvYA+8Mt\nRCyPVAsoqtF/4U6fPr1BMDn11FN1xYoVnpWvqYDRXMBJFjaJwKQyzwNKi24AxwPXAs8B/wIORXtP\nL49UDCjRqqqq0u7duyugRxxxhM6dO9eTlkmgplpSqfJFnCqB0ZhQIgkoEe0pH0hVP1bVl1T1FlU9\nEbDswwmgqqqKoqIif1Ct57XXlrJnz5ekp+exb98hcnI6k54eSeLpxvnzc61YMY+ysk2MGXNl7Xt5\neXkUFc2pN/ifjIsVbRKBMfWFvQVwszcUWa6qF3h60yi0tS2AKyoqePbZZ5k7dy67du3i1Vdf5bLL\nLqt9v7KykuOOO4mDB9/GPzU4M/M8ysu3tvoXerTbFScCf8r/wFX8gcHTmGQVyRbAsQgo31PVTz29\naRTaUkCZNm06U6dO5fDhuiVC+fn5bNy4kezsbACWL1/OhRfeCWwN+GQvli2bwwUXJMzvAUklFQKj\nMcEiCShRd3kFi0UwEZEiEdkjIh8GnOsiIstFZLOILBORXK+fm0wWL17Mgw9OqRdMwFm78utf/zro\n6k8I7KZxtrQxkcrLy2PQoEEWTEyb53lAiZEXgAuDzk0CVqhqH+AtYHKrlyqBHH/88aSlZQWdFa65\n5hpuvvnm2jMDBgwgIyMNKAAGAgVkZKQxYMCA1iusMSYlJUVAUdX/Ab4MOj0KZ+oy7n9Ht2qhEsxJ\nJ51EenpGwJlhZGXl8MQTT9C5c+fas3l5ecyf/1uys5UOHfaRna3Mn/9b++3aGBM1z8dQYkVEegCv\nq+pp7usvVLVrwPv1XgecT6kxlJKSEv79739zwgknNOizX7hwMddffyNZWd1R/aLJAWLr9zfGNCWS\nMRRv54rGV6NRY+rUqbU/FxQUUFBQ0ArF8dauXbuYPHkyCxYsAIScnNOort5ZL2hcffVVjBw5vEWB\nIi8vzwKJMaZWcXExxcXFUd0jmVsoG4ECVd0jIkfjpHxpkNI2UVsoLW0hVFVVMWvWLGbMmEFVVeBm\nVz8HLsPnG0ZZ2SYLDsYYTyXELK8YEvfwWwrc6P58A/Cn1i5QpBYtWkKPHn0ZOXIsPXr0DZmJ1+/y\nyy/noYceCgomADOB70WcbdgYY7yWFC0UEVmIMy3pCJx8YQ8BrwGvAt2BMuAKVf0qxGcTqoVSWVlJ\njx592b9/Jf6FhU21Mv76178yYsSIoLO9gLlAnrVQjDExkbItFFW9WlWPUdUsVT1eVV9Q1S9VdYSq\n9lHVC0IFk0QU7p4mw4cP55JLLgGgW7duFBbeTHb25+Tk3J+0KUuMMakplQblk0L9/E9OC+XgwR0s\nXbqU3r17k5vbcH3mrFmz6N27N1OmTCE3N5dHH/2lzdAyxiScpOjyikaidXlBXf6n9PTj+e67rXTq\nlMUXX3zBhAkTmDlzZryLZ4wxiZHLK9EkYkABeOONN7j//vv55z//WXsuIyODDRs20KtXrziWzBhj\nLKCElIgBZdu2bfTu3Ttkavnrr7+e+fPnh/iUMca0npQdlE8WlZWVlJaWUllZ2eR1vXr14sor669g\nz8jIYMKECTz11FOxLKIxxsSMBRSPhLO2BOCxxx6rTSk/atQoNmzYwMyZM0MOyjelpUHMGGNizbq8\nPNDY2pI//vFltmzZwrhx40J+bt68efTq1Yvhw4dH9Ny6wf1jOXiwjNmzZ3HbbbdEXhFjjHHZGEoI\nrRFQSktLGTlyLHv3rnHPlJORcRrV1V/Srl071q1bxymnnOLpM+uC2ERgBs76zi3MnTvbgooxJmo2\nhhIndWtLVgOPACdRXe1k2z906BD33ntvyAH4aOzYsYP09GNxgslK4ANgFePH/5d1fxlj4sICigfy\n8vIoKppDenoBTlaY7+q9v3z5ckpLSz19phPEynBaJnWr7jMz8y23lzEmLiygeGTMmCtZu7aU9u3b\n1zvfr18/VqxYweDBgz19Xl5eHrNnzwK2ELidb03Nx+Tn53v6LGOMaQkLKB469dRTmTJlCuDk3Zo7\ndy5r166NeNC9Obfddgtz584mK2sonToNsNxexpi4skF5j3333Xc8/vjjjB8/PuwpwJGy3ReNMV6z\nWV4hJOJKeWOMSXQ2y8sYY0zcWEAxxhjjCQsoxhhjPGEBxRhjjCcsoBhjjPGEBRRjjDGesIBijDHG\nExZQjDHGeMICijHGGE8kfUARkYtEZJOIbBGRifEujzHGtFVJnXpFRNJw0u0OBz4BSoGrVHVTwDWW\nesUYY8LUFlOvDAa2qmqZqlYDi4FRcS6TaURlZSWlpaW2AZgxKSrZA8qxwM6A1+XuOZNgFi1aQo8e\nfRk5ciw9evRl0aIl8S6SMcZj6fEuQGuYOnVq7c8FBQUUFBTErSxtUWVlJYWFd7B//0r27z8N+JDC\nwmGMGHG+pds3JkEUFxdTXFwc1T2SfQxlCDBVVS9yX08CVFVnBFxjYyhxVlpaysiRY9m7d03tuZyc\ngaxYMY9BgwbFsWTGmMa0xTGUUqCXiPQQkUzgKmBpnMtkguTn53Pw4A4Ctyquri6zrYqNSTFJHVBU\n9RDwU2A5sB5YrKob41sqEywvL4+iojn4fMPIyRloWxUbk6KSusurJazLK3HYVsXGJA/bAjgECyjG\nGBO+tjiGYowxJkFYQDHGGOMJCyjGGGM8YQHFGGOMJyygGGOM8YQFFGOMMZ6wgGKMMcYTFlCMMcZ4\nwgKKMcYYT1hAMcYY4wkLKHFiuxcaY1KNBZQ4sN0LjTGpyJJDtrLKykp69OjL/v0rAWf3Qp9vGGVl\nmywDrzEmYVhyyCSwY8cOMjPzcYIJwGlkZPRgx44d8SuUMcZ4wAJKK7PdC40xqcoCSiuz3QuNManK\nxlDixHYvNMYkMtuxMYREDSjGGJPIbFDeGGNM3FhAMcYY4wkLKMYYYzyR0AFFRC4TkX+KyCERGRj0\n3mQR2SoiG0XkgniV0RhjjCOhAwrwEfBj4G+BJ0XkZOAK4GTgR8AcEQlr8ChVFBcXx7sIMWX1S26p\nXL9UrlukEjqgqOpmVd0KBAeLUcBiVa1R1R3AVmBwa5cvEaT6P2qrX3JL5fqlct0ildABpQnHAjsD\nXu9yzxljjImT9HgXQETeBI4KPAUo8DNVfT0+pTLGGBOupFjYKCIrgftU9R/u60mAquoM9/UbwEOq\nujrEZxO/gsYYk4DCXdgY9xZKGAIrthR4WUSewOnq6gWUhPpQuH8gxhhjIpPQYygiMlpEdgJDgP8r\nIn8BUNUNwCvABuDPwB2WX8UYY+IrKbq8jDHGJL6EbqFES0QuEpFNIrJFRCbGuzzREpEiEdkjIh8G\nnOsiIstFZLOILBOR3HiWMVIicpyIvCUi60XkIxEZ555PlfplichqEVnr1u8h93xK1M9PRNJE5B8i\nstR9nTL1E5EdIrLO/Tsscc+lUv1yReRVd7H4ehE5M9z6pWxAEZE04NfAhcApwBgR6RvfUkXtBZz6\nBJoErFDVPsBbwORWL5U3aoB7VfUU4CzgTvfvKyXqp6oHgGGqOgDoD/xIRAaTIvULMB6nK9ovlep3\nGChQ1QGq6l/3lkr1mw38WVVPBk4HNhFu/VQ1JQ+ccZe/BLyeBEyMd7k8qFcP4MOA15uAo9yfjwY2\nxbuMHtXzNWBEKtYPaA+8DwxKpfoBxwFvAgXAUvdcKtXv38ARQedSon5ADvCvEOfDql/KtlBouPix\nnNRc/Hikqu4BUNXdwJFxLk/URCQf57f4VTj/mFOifm530FpgN/CmqpaSQvUDngDux1lH5pdK9VPg\nTREpFZGb3XOpUr+ewGci8oLbZfmsiLQnzPqlckBpq5J6loWIdAR+D4xX1W9pWJ+krZ+qHlany+s4\nYLCInEKK1E9E/hPYo6of0DBVUqCkrJ/rHFUdCPwHTpfsD0mRvz+cJSQDgd+4ddyH06sTVv1SOaDs\nAo4PeH2cey7V7BGRowBE5GigIs7liZiIpOMEkwWq+if3dMrUz09VvwaKgYtInfqdA1wiItuBRcD5\nIrIA2J0i9UNVP3X/W4nTJTuY1Pn7Kwd2qur77us/4ASYsOqXygGlFOglIj1EJBO4CmdBZLITGi7y\nvNH9+QbgT8EfSCLPAxtUdXbAuZSon4h088+QEREfMBLYSIrUT1UfUNXjVfUEnP/X3lLV64DXSYH6\niUh7t/WMiHQALsDJhp4qf397gJ0i0ts9NRxYT5j1S+l1KCJyEc7MhTSgSFUfi3ORoiIiC3EGPI8A\n9gAP4fym9CrQHSgDrlDVr+JVxkiJyDnA2zj/k6p7PICTAeEVkr9+/YD5OP8W04AlqjpdRLqSAvUL\nJCJDcVIlXZIq9RORnsB/4/y7TAdeVtXHUqV+ACJyOvBbIAPYDvwEaEcY9UvpgGKMMab1pHKXlzHG\nmFZkAcUYY4wnLKAYY4zxhAUUY4wxnrCAYowxxhMWUIwxxnjCAooxxhhPWEAxKUtE5rt7VxwWkRoR\naTI5qIicJSLfishBEfm7iBS1VlkTlYjMcvcT2isiwVsnGFOPBRSTslT1BuAy4F2cdDW9G7vWzSP2\nYyALJ0He2apa2CoFTWCqOgEni3B7nOzPxjTKAopJdT/E2ZhMgBOauO5mnL0f2uFsJGTqDMLZg2dv\nvAtiEpsFFJPqzsHJYPwdjQQUd/+VKpwWzGHgnVYqW7IowMmObEyTLKCYVJfjpovfQeMtlOtU9XfA\necD6ZE3uFwsicjyQjwUU0wLp8S6AMbHiDsJ/7L7cToiAIiKjgaVuSvkzgGdDXNMfuB34AsjEyfZ8\np6ruC7jmfPeafwFdcDIn36aq54W4X3fg5zibGH3nHo+r6n4R6QXcjbPV80uquiTgcz8FRqrqqIBz\nlwFDcbLBjgEuB76Ps//PkwH7W0RSjw44+8MfcutjTNPivZexHXbE6gCuBi52f34aqAx6vxNwr/vz\ncJzursuDrrkRWAscHXDufv993deFOBsPdXdfHwN8C6wJUaZsYDNwkvv6BKASuARnnGcezjjOOOCD\noM+uAv4Y8DoLeNT9eQvO3iPnAF1xWmRPRVmPo4Gvgffj/XdpR3Ic1uVlUtm51I2HbAe6ikingPfH\n4nyBg9PdpQT8Ji4iZ+G0WO5QZz9tRGSQe+177uvTgWdwtizeCaCqnwBfAitDlGkkkAfsdF9/hTOL\n6k2coPaGqh7C2c1xS0BZOuDsoBc4YaAAeE9EMnBaKKWq+i7OjKwvcPbJiaYeu4G9WHeXaSHr8jKp\nrIvWjYf82/3vCcA6ETkD2KR13T0/BLaps3Od31ScL+bRInIpzpjjRmCMOvvdA0wHvsHZhAioHXc4\nltBfxF8BnYF/isifgVdU9Zfu5/4JVIrIMTg7Al4a8LlzcFoufws496VbnrNwurBeAVDVcpzgE209\nejRRD2MaincTyQ47YnEAR+KMIfhfn4bTpfVjnC/UBwPey8AZz3gu4Fw6UA3MaeIZue41C4PO3+Ce\nz2nkc/fjjO0ccst0e9D79+AEi4yAc9OAikbu9yDwaSPvRVOPG5uqhx12BB/W5WVS1XnUH0gObKH8\nBGdtit8gwEf93/6PwGkRbG/iGb3ca4IX/J2HM/7xtTsluR5VnamqxwOnAquBO4MuuQBYqarVAeeG\n+uvjbkcbaBiNtyKircc6tx7BzzSmAQsoJlX9kICAoqrfAJ+759PVHSdw+cdPAgPKZzgD0g26hUXk\naLfryL/Q7+OA97JwxkKK3VP3Bbz3RxH5IKBMG4GXaPhlfzzOwL3/c9k4Qc9/z3uDnjeExgNKtPXw\nj9ncizHNsIBiUo6IHAmcjxNAAv0b6Ak8F3T+fKA8MMioMzA+D2dwPPDePwBmAH9V1W04M6dOcN9L\nw5lN1gHYLiJHBJXhDGBFUDmvBh4JKs9WnJlafj/DaUH8S0ROISDYAGfjjJ8UE0KU9WgPbBWRPJzZ\nX8Y0SVQ13mUwxhPuF/gfcAakO+BMnZ2lqs+4788Bfqeqq9zcXUuBo4D+OGtBSnCm5T7tXt8OeAxn\nYHonzjTdzcA8VT3sXnMC8CROEEgH5gADcKbglgGTVbXSvfaHOF1XPiAH5wv7GQ1YK+Je1xNnxtVm\nnJbTb4Ef4czq2oEz1fmAe+11OGMwZzfx5xJNPW7GCcSTVDU4QBtTjwUUY4wxnrAuL2OMMZ6wgGKM\nMcYTFlCMMcZ4wgKKMcYYT1hAMcYY4wkLKMYYYzxhAcUYY4wnLKAYY4zxhAUUY4wxnrCAYowxxhP/\nH8IIGjRi1+MQAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1191c49d0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()          #对比看准确度\n",
    "ax.scatter(y_test, predicted)\n",
    "ax.plot([y.min(), y.max()], [y.min(), y.max()], 'k--', lw=4)\n",
    "ax.set_xlabel('$Measured$', fontsize = 20)\n",
    "ax.set_ylabel('$Predicted$', fontsize = 20)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "交叉验证"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "from sklearn.cross_validation import cross_val_score\n",
    "\n",
    "regr = linear_model.LinearRegression()\n",
    "scores = cross_val_score(regr, boston.data , boston.target, cv = 3)\n",
    "scores.mean()  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-1.5787701857181775"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.cross_validation import cross_val_score\n",
    "\n",
    "regr = linear_model.LinearRegression()\n",
    "scores = cross_val_score(regr, boston.data , boston.target, cv = 3)\n",
    "scores.mean()  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.45384871359695766"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_X_scale = scale(boston.data)\n",
    "scores = cross_val_score(regr, boston.data, boston.target, cv = 7)\n",
    "scores.mean() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n8CcicqD/BzvtxH8Rbl6FAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x11a8e7990>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "scores = [cross_val_score(regr, data_X_scale, boston.target, cv = int(i)).mean() for i in range(3, 50)]\n",
    "plt.plot(range(3, 50), scores,'r-o')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "使用天涯数据"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>title</th>\n",
       "      <th>link</th>\n",
       "      <th>author</th>\n",
       "      <th>author_page</th>\n",
       "      <th>click</th>\n",
       "      <th>reply</th>\n",
       "      <th>time</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>【民间语文第161期】宁波px启示:船进港湾人应上岸</td>\n",
       "      <td>/post-free-2849477-1.shtml</td>\n",
       "      <td>贾也</td>\n",
       "      <td>http://www.tianya.cn/50499450</td>\n",
       "      <td>194699</td>\n",
       "      <td>2703</td>\n",
       "      <td>2012-10-29 07:59</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>宁波镇海PX项目引发群体上访 当地政府发布说明(转载)</td>\n",
       "      <td>/post-free-2839539-1.shtml</td>\n",
       "      <td>无上卫士ABC</td>\n",
       "      <td>http://www.tianya.cn/74341835</td>\n",
       "      <td>88254</td>\n",
       "      <td>1041</td>\n",
       "      <td>2012-10-24 12:41</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                         title                        link   author  \\\n",
       "0   【民间语文第161期】宁波px启示:船进港湾人应上岸  /post-free-2849477-1.shtml       贾也   \n",
       "1  宁波镇海PX项目引发群体上访 当地政府发布说明(转载)  /post-free-2839539-1.shtml  无上卫士ABC   \n",
       "\n",
       "                     author_page   click  reply              time  \n",
       "0  http://www.tianya.cn/50499450  194699   2703  2012-10-29 07:59  \n",
       "1  http://www.tianya.cn/74341835   88254   1041  2012-10-24 12:41  "
      ]
     },
     "execution_count": 135,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "df = pd.read_csv('/Users/dingjiayi/Desktop/data/tianya.txt', sep = \"\\t\", header=None)\n",
    "df=df.rename(columns = {0:'title', 1:'link', 2:'author',3:'author_page', 4:'click', 5:'reply', 6:'time'})\n",
    "df[:2]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def randomSplit(dataX, dataY, num):\n",
    "    dataX_train = []\n",
    "    dataX_test = []\n",
    "    dataY_train = []\n",
    "    dataY_test = []\n",
    "    import random\n",
    "    test_index = random.sample(range(len(df)), num)\n",
    "    for k in range(len(dataX)):\n",
    "        if k in test_index:\n",
    "            dataX_test.append([dataX[k]])\n",
    "            dataY_test.append(dataY[k])\n",
    "        else:\n",
    "            dataX_train.append([dataX[k]])\n",
    "            dataY_train.append(dataY[k])\n",
    "    return dataX_train, dataX_test, dataY_train, dataY_test, "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Variance score: 0.74\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "\n",
    "# Use only one feature\n",
    "data_X = df.reply\n",
    "# Split the data into training/testing sets\n",
    "data_X_train, data_X_test, data_y_train, data_y_test = randomSplit(np.log(df.click+1), np.log(df.reply+1), 20)\n",
    "# Create linear regression object\n",
    "regr = linear_model.LinearRegression()\n",
    "# Train the model using the training sets\n",
    "regr.fit(data_X_train, data_y_train)\n",
    "# Explained variance score: 1 is perfect prediction\n",
    "print'Variance score: %.2f' % regr.score(data_X_test, data_y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "y_true, y_pred = data_y_test, regr.predict(data_X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\nzaz8EW+rAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x11afc8210>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(y_pred, y_true,  color='black')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\nTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x11a821350>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot outputs\n",
    "plt.scatter(data_X_test, data_y_test,  color='black')\n",
    "plt.plot(data_X_test, regr.predict(data_X_test), color='blue', linewidth=3)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Coefficients: \n",
      "[ 0.67967658]\n"
     ]
    }
   ],
   "source": [
    "# The coefficients\n",
    "print 'Coefficients: \\n', regr.coef_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Residual sum of squares: 0.92\n"
     ]
    }
   ],
   "source": [
    "# The mean square error\n",
    "print \"Residual sum of squares: %.2f\" % np.mean((regr.predict(data_X_test) - data_y_test) ** 2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "df.click_log = [[df.click[i]] for i in range(len(df))]\n",
    "df.reply_log = [[df.reply[i]] for i in range(len(df))]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Variance score: 0.81\n"
     ]
    }
   ],
   "source": [
    "from sklearn.cross_validation import train_test_split\n",
    "Xs_train, Xs_test, y_train, y_test = train_test_split(df.click_log, df.reply_log,test_size=0.2, random_state=0)\n",
    "\n",
    "# Create linear regression object\n",
    "regr = linear_model.LinearRegression()\n",
    "# Train the model using the training sets\n",
    "regr.fit(Xs_train, y_train)\n",
    "# Explained variance score: 1 is perfect prediction\n",
    "print'Variance score: %.2f' % regr.score(Xs_test, y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\nSUVORK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x11a87ce90>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot outputs\n",
    "plt.scatter(Xs_test, y_test,  color='black')\n",
    "plt.plot(Xs_test, regr.predict(Xs_test), color='blue', linewidth=3)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "＃sklearn做logistic回归"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.69150308762376722"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.cross_validation import cross_val_score\n",
    "\n",
    "regr = linear_model.LinearRegression()\n",
    "scores = cross_val_score(regr, df.click_log, df.reply_log, cv = 3)\n",
    "scores.mean()  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.70310676506207104"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "regr = linear_model.LinearRegression()\n",
    "scores = cross_val_score(regr, df.click_log, df.reply_log, cv = 4)\n",
    "scores.mean()  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "使用sklearn做logistic回归"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "repost = []\n",
    "for i in df.title:\n",
    "    if u'转载' in i.decode('utf8'):\n",
    "        repost.append(1)\n",
    "    else:\n",
    "        repost.append(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[[194699, 2703], [88254, 1041], [82888, 625]]"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_X = [[df.click[i], df.reply[i]] for i in range(len(df))]\n",
    "data_X[:3]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.61067503924646782"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.linear_model import LogisticRegression\n",
    "df['repost'] = repost\n",
    "model = LogisticRegression()\n",
    "model.fit(data_X,df.repost)\n",
    "model.score(data_X,df.repost)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def randomSplitLogistic(dataX, dataY, num):\n",
    "    dataX_train = []\n",
    "    dataX_test = []\n",
    "    dataY_train = []\n",
    "    dataY_test = []\n",
    "    import random\n",
    "    test_index = random.sample(range(len(df)), num)\n",
    "    for k in range(len(dataX)):\n",
    "        if k in test_index:\n",
    "            dataX_test.append(dataX[k])\n",
    "            dataY_test.append(dataY[k])\n",
    "        else:\n",
    "            dataX_train.append(dataX[k])\n",
    "            dataY_train.append(dataY[k])\n",
    "    return dataX_train, dataX_test, dataY_train, dataY_test, "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Variance score: 0.45\n"
     ]
    }
   ],
   "source": [
    "# Split the data into training/testing sets\n",
    "data_X_train, data_X_test, data_y_train, data_y_test = randomSplitLogistic(data_X, df.repost, 20)\n",
    "# Create logistic regression object\n",
    "log_regr = LogisticRegression()\n",
    "# Train the model using the training sets\n",
    "log_regr.fit(data_X_train, data_y_train)\n",
    "# Explained variance score: 1 is perfect prediction\n",
    "print'Variance score: %.2f' % log_regr.score(data_X_test, data_y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "y_true, y_pred = data_y_test, log_regr.predict(data_X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "([0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1],\n",
       " array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]))"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_true, y_pred"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "             precision    recall  f1-score   support\n",
      "\n",
      "          0       0.00      0.00      0.00        11\n",
      "          1       0.45      1.00      0.62         9\n",
      "\n",
      "avg / total       0.20      0.45      0.28        20\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/dingjiayi/anaconda/lib/python2.7/site-packages/sklearn/metrics/classification.py:1074: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples.\n",
      "  'precision', 'predicted', average, warn_for)\n"
     ]
    }
   ],
   "source": [
    "print(classification_report(y_true, y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "from sklearn.cross_validation import train_test_split\n",
    "Xs_train, Xs_test, y_train, y_test = train_test_split(data_X, df.repost, test_size=0.2, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Variance score: 0.62\n"
     ]
    }
   ],
   "source": [
    "# Create logistic regression object\n",
    "log_regr = LogisticRegression()\n",
    "# Train the model using the training sets\n",
    "log_regr.fit(Xs_train, y_train)\n",
    "# Explained variance score: 1 is perfect prediction\n",
    "print'Variance score: %.2f' % log_regr.score(Xs_test, y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Logistic score for test set: 0.615686\n",
      "Logistic score for training set: 0.606477\n",
      "             precision    recall  f1-score   support\n",
      "\n",
      "          0       0.67      0.04      0.08       100\n",
      "          1       0.61      0.99      0.76       155\n",
      "\n",
      "avg / total       0.63      0.62      0.49       255\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print('Logistic score for test set: %f' % log_regr.score(Xs_test, y_test))\n",
    "print('Logistic score for training set: %f' % log_regr.score(Xs_train, y_train))\n",
    "y_true, y_pred = y_test, log_regr.predict(Xs_test)\n",
    "print(classification_report(y_true, y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.61065712935896299"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "logre = LogisticRegression()\n",
    "scores = cross_val_score(logre, data_X, df.repost, cv = 3)\n",
    "scores.mean() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.60830602061003336"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "logre = LogisticRegression()\n",
    "data_X_scale = scale(data_X)\n",
    "# The importance of preprocessing in data science and the machine learning pipeline I: \n",
    "scores = cross_val_score(logre, data_X_scale, df.repost, cv = 3)\n",
    "scores.mean() "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "贝叶斯"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'ABCMeta  BaseDiscreteNB  BaseEstimator  BaseNB  BernoulliNB  ClassifierMixin  GaussianNB  LabelBinarizer  MultinomialNB  __all__  __builtins__  __doc__  __file__  __name__  __package__  _check_partial_fit_first_call  abstractmethod  binarize  check_X_y  check_array  check_is_fitted  in1d  issparse  label_binarize  logsumexp  np  safe_sparse_dot  six'"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn import naive_bayes\n",
    "'  '.join(dir(naive_bayes))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#Import Library of Gaussian Naive Bayes model\n",
    "from sklearn.naive_bayes import GaussianNB\n",
    "import numpy as np\n",
    "\n",
    "#assigning predictor and target variables\n",
    "x= np.array([[-3,7],[1,5], [1,2], [-2,0], [2,3], [-4,0], [-1,1], [1,1], [-2,2], [2,7], [-4,1], [-2,7]])\n",
    "Y = np.array([3, 3, 3, 3, 4, 3, 3, 4, 3, 4, 4, 4])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[4 3]\n"
     ]
    }
   ],
   "source": [
    "#Create a Gaussian Classifier\n",
    "model = GaussianNB()\n",
    "\n",
    "# Train the model using the training sets \n",
    "model.fit(x[:8], Y[:8])\n",
    "\n",
    "#Predict Output \n",
    "predicted= model.predict([[1,2],[3,4]])\n",
    "print predicted"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.25"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.score(x[8:], Y[8:])  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "交叉验证"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[2703   77    0    0    0    0   23    0    0    0    0    0    0    0    0\n",
      "    0    0    0    0    0]\n"
     ]
    }
   ],
   "source": [
    "data_X_train, data_X_test, data_y_train, data_y_test = randomSplit(df.click, df.reply, 20)\n",
    "# Train the model using the training sets \n",
    "model.fit(data_X_train, data_y_train)\n",
    "\n",
    "#Predict Output \n",
    "predicted= model.predict(data_X_test)\n",
    "print predicted"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.75"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.score(data_X_test, data_y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/dingjiayi/anaconda/lib/python2.7/site-packages/sklearn/cross_validation.py:516: Warning: The least populated class in y has only 3 members, which is too few. The minimum number of labels for any class cannot be less than n_folds=5.\n",
      "  % (min_labels, self.n_folds)), Warning)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0.61905707535929522"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.cross_validation import cross_val_score\n",
    "\n",
    "model = GaussianNB()\n",
    "scores = cross_val_score(model, [[c] for c in df.click], df.reply, cv = 5)\n",
    "scores.mean()   "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "决策树"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "from sklearn import tree\n",
    "model = tree.DecisionTreeClassifier(criterion='gini')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.91626794258373201"
      ]
     },
     "execution_count": 85,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_X_train, data_X_test, data_y_train, data_y_test = randomSplitLogistic(data_X, df.repost, 20)\n",
    "model.fit(data_X_train,data_y_train)\n",
    "model.score(data_X_train,data_y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1])"
      ]
     },
     "execution_count": 86,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Predict\n",
    "model.predict(data_X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.91441521244869639"
      ]
     },
     "execution_count": 87,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# crossvalidation\n",
    "scores = cross_val_score(model, data_X, df.repost, cv = 3)\n",
    "scores.mean()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "svm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "from sklearn import svm\n",
    "# Create SVM classification object \n",
    "model=svm.SVC()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'LinearSVC LinearSVR NuSVC NuSVR OneClassSVM SVC SVR __all__ __builtins__ __doc__ __file__ __name__ __package__ __path__ base bounds classes l1_min_c liblinear libsvm libsvm_sparse'"
      ]
     },
     "execution_count": 101,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "' '.join(dir(svm))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.91307814992025516"
      ]
     },
     "execution_count": 108,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_X_train, data_X_test, data_y_train, data_y_test = randomSplitLogistic(data_X, df.repost, 20)\n",
    "model.fit(data_X_train,data_y_train)\n",
    "model.score(data_X_train,data_y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1])"
      ]
     },
     "execution_count": 109,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Predict\n",
    "model.predict(data_X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# crossvalidation\n",
    "scores = []\n",
    "cvs = [3, 5, 10, 25, 50, 75, 100]\n",
    "for i in cvs:\n",
    "    score = cross_val_score(model, data_X, df.repost, cv = i)\n",
    "    scores.append(score.mean() ) # Try to tune cv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x11b153550>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(cvs, scores, 'b-o')\n",
    "plt.xlabel('$cv$', fontsize = 20)\n",
    "plt.ylabel('$Score$', fontsize = 20)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#Import the Numpy library\n",
    "import numpy as np\n",
    "#Import 'tree' from scikit-learn library\n",
    "from sklearn import tree"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "train = pd.read_csv('/Users/dingjiayi/cjc2016/data/tatanic_train.csv', sep = \",\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Braund, Mr. Owen Harris</td>\n",
       "      <td>male</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>A/5 21171</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>PC 17599</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C85</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Heikkinen, Miss. Laina</td>\n",
       "      <td>female</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>STON/O2. 3101282</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
       "      <td>female</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>113803</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>C123</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Allen, Mr. William Henry</td>\n",
       "      <td>male</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>373450</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Unnamed: 0  PassengerId  Survived  Pclass  \\\n",
       "0           0            1         0       3   \n",
       "1           1            2         1       1   \n",
       "2           2            3         1       3   \n",
       "3           3            4         1       1   \n",
       "4           4            5         0       3   \n",
       "\n",
       "                                                Name     Sex   Age  SibSp  \\\n",
       "0                            Braund, Mr. Owen Harris    male  22.0      1   \n",
       "1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n",
       "2                             Heikkinen, Miss. Laina  female  26.0      0   \n",
       "3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n",
       "4                           Allen, Mr. William Henry    male  35.0      0   \n",
       "\n",
       "   Parch            Ticket     Fare Cabin Embarked  \n",
       "0      0         A/5 21171   7.2500   NaN        S  \n",
       "1      0          PC 17599  71.2833   C85        C  \n",
       "2      0  STON/O2. 3101282   7.9250   NaN        S  \n",
       "3      0            113803  53.1000  C123        S  \n",
       "4      0            373450   8.0500   NaN        S  "
      ]
     },
     "execution_count": 121,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/dingjiayi/anaconda/lib/python2.7/site-packages/ipykernel/__main__.py:3: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "  app.launch_new_instance()\n",
      "/Users/dingjiayi/anaconda/lib/python2.7/site-packages/ipykernel/__main__.py:4: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "/Users/dingjiayi/anaconda/lib/python2.7/site-packages/ipykernel/__main__.py:9: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "/Users/dingjiayi/anaconda/lib/python2.7/site-packages/ipykernel/__main__.py:10: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "/Users/dingjiayi/anaconda/lib/python2.7/site-packages/ipykernel/__main__.py:11: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n"
     ]
    }
   ],
   "source": [
    "train[\"Age\"] = train[\"Age\"].fillna(train[\"Age\"].median())\n",
    "#Convert the male and female groups to integer form\n",
    "train[\"Sex\"][train[\"Sex\"] == \"male\"] = 0\n",
    "train[\"Sex\"][train[\"Sex\"] == \"female\"] = 1\n",
    "\n",
    "#Impute the Embarked variable\n",
    "train[\"Embarked\"] = train[\"Embarked\"].fillna('S')\n",
    "#Convert the Embarked classes to integer form\n",
    "train[\"Embarked\"][train[\"Embarked\"] == \"S\"] = 0\n",
    "train[\"Embarked\"][train[\"Embarked\"] == \"C\"] = 1\n",
    "train[\"Embarked\"][train[\"Embarked\"] == \"Q\"] = 2\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 0.12315342  0.31274009  0.2274373   0.33666919]\n",
      "0.977553310887\n"
     ]
    }
   ],
   "source": [
    "#Create the target and features numpy arrays: target, features_one\n",
    "target = train['Survived'].values\n",
    "features_one = train[[\"Pclass\", \"Sex\", \"Age\", \"Fare\"]].values\n",
    "\n",
    "#Fit your first decision tree: my_tree_one\n",
    "my_tree_one = tree.DecisionTreeClassifier()\n",
    "\n",
    "my_tree_one = my_tree_one.fit(features_one, target)\n",
    "#Look at the importance of the included features and print the score\n",
    "print(my_tree_one.feature_importances_)\n",
    "print(my_tree_one.score(features_one, target))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/dingjiayi/anaconda/lib/python2.7/site-packages/ipykernel/__main__.py:3: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "  app.launch_new_instance()\n",
      "/Users/dingjiayi/anaconda/lib/python2.7/site-packages/ipykernel/__main__.py:6: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "/Users/dingjiayi/anaconda/lib/python2.7/site-packages/ipykernel/__main__.py:7: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "/Users/dingjiayi/anaconda/lib/python2.7/site-packages/ipykernel/__main__.py:12: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "/Users/dingjiayi/anaconda/lib/python2.7/site-packages/ipykernel/__main__.py:13: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "/Users/dingjiayi/anaconda/lib/python2.7/site-packages/ipykernel/__main__.py:14: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n"
     ]
    }
   ],
   "source": [
    "test = pd.read_csv('/Users/dingjiayi/cjc2016/data/tatanic_test.csv', sep = \",\")\n",
    "# Impute the missing value with the median\n",
    "test.Fare[152] = test.Fare.median()\n",
    "test[\"Age\"] = test[\"Age\"].fillna(test[\"Age\"].median())\n",
    "#Convert the male and female groups to integer form\n",
    "test[\"Sex\"][test[\"Sex\"] == \"male\"] = 0\n",
    "test[\"Sex\"][test[\"Sex\"] == \"female\"] = 1\n",
    "\n",
    "#Impute the Embarked variable\n",
    "test[\"Embarked\"] = test[\"Embarked\"].fillna('S')\n",
    "#Convert the Embarked classes to integer form\n",
    "test[\"Embarked\"][test[\"Embarked\"] == \"S\"] = 0\n",
    "test[\"Embarked\"][test[\"Embarked\"] == \"C\"] = 1\n",
    "test[\"Embarked\"][test[\"Embarked\"] == \"Q\"] = 2\n",
    "\n",
    "# Extract the features from the test set: Pclass, Sex, Age, and Fare.\n",
    "test_features = test[[\"Pclass\",\"Sex\", \"Age\", \"Fare\"]].values\n",
    "\n",
    "# Make your prediction using the test set\n",
    "my_prediction = my_tree_one.predict(test_features)\n",
    "\n",
    "# Create a data frame with two columns: PassengerId & Survived. Survived contains your predictions\n",
    "PassengerId =np.array(test['PassengerId']).astype(int)\n",
    "my_solution = pd.DataFrame(my_prediction, PassengerId, columns = [\"Survived\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "     Survived\n",
      "892         0\n",
      "893         0\n",
      "894         1\n"
     ]
    }
   ],
   "source": [
    "print my_solution[:3]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(418, 1)\n"
     ]
    }
   ],
   "source": [
    "# Check that your data frame has 418 entries\n",
    "print my_solution.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Write your solution to a csv file with the name my_solution.csv\n",
    "my_solution.to_csv(\"/Users/dingjiayi/cjc2016/data/tatanic_solution_one.csv\", index_label = [\"PassengerId\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.905723905724\n"
     ]
    }
   ],
   "source": [
    "# Create a new array with the added features: features_two\n",
    "features_two = train[[\"Pclass\",\"Age\",\"Sex\",\"Fare\", \"SibSp\", \"Parch\", \"Embarked\"]].values\n",
    "\n",
    "#Control overfitting by setting \"max_depth\" to 10 and \"min_samples_split\" to 5 : my_tree_two\n",
    "max_depth = 10\n",
    "min_samples_split = 5\n",
    "my_tree_two = tree.DecisionTreeClassifier(max_depth = max_depth, min_samples_split = min_samples_split, random_state = 1)\n",
    "my_tree_two = my_tree_two.fit(features_two, target)\n",
    "\n",
    "#Print the score of the new decison tree\n",
    "print(my_tree_two.score(features_two, target))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.979797979798\n"
     ]
    }
   ],
   "source": [
    "# create a new train set with the new variable\n",
    "train_two = train\n",
    "train_two['family_size'] = train.SibSp + train.Parch + 1\n",
    "\n",
    "# Create a new decision tree my_tree_three\n",
    "features_three = train[[\"Pclass\", \"Sex\", \"Age\", \"Fare\", \"SibSp\", \"Parch\", \"family_size\"]].values\n",
    "\n",
    "my_tree_three = tree.DecisionTreeClassifier()\n",
    "my_tree_three = my_tree_three.fit(features_three, target)\n",
    "\n",
    "# Print the score of this decision tree\n",
    "print(my_tree_three.score(features_three, target))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.939393939394\n",
      "418\n",
      "[0 0 0]\n"
     ]
    }
   ],
   "source": [
    "#Import the `RandomForestClassifier`\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "\n",
    "#We want the Pclass, Age, Sex, Fare,SibSp, Parch, and Embarked variables\n",
    "features_forest = train[[\"Pclass\", \"Age\", \"Sex\", \"Fare\", \"SibSp\", \"Parch\", \"Embarked\"]].values\n",
    "\n",
    "#Building the Forest: my_forest\n",
    "n_estimators = 100\n",
    "forest = RandomForestClassifier(max_depth = 10, min_samples_split=2, n_estimators = n_estimators, random_state = 1)\n",
    "my_forest = forest.fit(features_forest, target)\n",
    "\n",
    "#Print the score of the random forest\n",
    "print(my_forest.score(features_forest, target))\n",
    "\n",
    "#Compute predictions and print the length of the prediction vector:test_features, pred_forest\n",
    "test_features = test[[\"Pclass\", \"Age\", \"Sex\", \"Fare\", \"SibSp\", \"Parch\", \"Embarked\"]].values\n",
    "pred_forest = my_forest.predict(test_features)\n",
    "print(len(test_features))\n",
    "print(pred_forest[:3])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 0.14130255  0.17906027  0.41616727  0.17938711  0.05039699  0.01923751\n",
      "  0.0144483 ]\n",
      "[ 0.10384741  0.20139027  0.31989322  0.24602858  0.05272693  0.04159232\n",
      "  0.03452128]\n",
      "0.905723905724\n",
      "0.939393939394\n"
     ]
    }
   ],
   "source": [
    "#Request and print the `.feature_importances_` attribute\n",
    "print(my_tree_two.feature_importances_)\n",
    "print(my_forest.feature_importances_)\n",
    "\n",
    "#Compute and print the mean accuracy score for both models\n",
    "print(my_tree_two.score(features_two, target))\n",
    "print(my_forest.score(features_two, target))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.11"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
